[build-system]
requires = ["hatchling", "hatch-vcs"]
build-backend = "hatchling.build"

[project]
name = "formulate"
authors = [
    { name = "Chris Burr", email = "c.b@cern.ch" },
    { name = "Aryan Roy", email = "aryanroy5678@gmail.com" },
    { name = "Jonas Eschle", email = "jonas.eschle@gmail.com" }
]
maintainers = [
    { name = "The Scikit-HEP admins", email = "scikit-hep-admins@googlegroups.com" },
]
description = " Easy conversions between different styles of expressions"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 1 - Planning",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: BSD License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Typing :: Typed",
]
dynamic = ["version"]
dependencies = [
    "hepunits",
    "lark",
]

[project.optional-dependencies]
test = [
    "pytest >=6",
    "pytest-cov >=3",
    "hypothesis",
    "numpy",
]

docs = [
    "sphinx>=4.0",
    "myst_parser>=0.13",
    "sphinx-book-theme>=0.1.0",
    "sphinx_copybutton",
    "sphinx_rtd_theme",
    "sphinx-autodoc-typehints",
    "jupyter-sphinx>=0.3.2",
    "numexpr",
]
dev = [
    "formulate[docs]",
    "formulate[test]",
    "pre-commit",
]

[project.urls]
Homepage = "https://github.com/Scikit-HEP/formulate"
"Bug Tracker" = "https://github.com/Scikit-HEP/formulate/issues"
Discussions = "https://github.com/Scikit-HEP/formulate/discussions"
Changelog = "https://github.com/Scikit-HEP/formulate/releases"

[tool.hatch]
version.source = "vcs"
build.hooks.vcs.version-file = "src/formulate/_version.py"
envs.default.dependencies = [
    "pytest",
    "pytest-cov",
]


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = ["error"]
log_cli_level = "INFO"
testpaths = [
    "tests",
]


[tool.mypy]
files = "src"
python_version = "3.10"
warn_unused_configs = true
strict = true
show_error_codes = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true

[[tool.mypy.overrides]]
module = [ "hepunits.*", "lark" ]
ignore_missing_imports = true

[tool.ruff]
target-version = "py310"
src = ["src"]

[tool.ruff.lint]
select = [
    "E", "F", "W", # flake8
    "B", "B904", # flake8-bugbear
    "I", # isort
    "ARG", # flake8-unused-arguments
    "C4", # flake8-comprehensions
    "EM", # flake8-errmsg
    "ICN", # flake8-import-conventions
    "ISC", # flake8-implicit-str-concat
    "G", # flake8-logging-format
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PL", # pylint
    "PT", # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "RET", # flake8-return
    "RUF", # Ruff-specific
    "SIM", # flake8-simplify
    "T20", # flake8-print
    "UP", # pyupgrade
    "YTT", # flake8-2020
    "EXE", # flake8-executable
    "NPY", # NumPy specific rules
    "PD", # pandas-vet
]
extend-ignore = [
    "PLR", # Design related pylint codes
    "E501", # Line too long
]
typing-modules = ["formulate._compat.typing"]
unfixable = [
    "T20", # Removes print statements
    "F841", # Removes unused variables
]
exclude = []
flake8-unused-arguments.ignore-variadic-names = true
isort.required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20", "B017", "PT011", "E722", "SIM105", "UP038", "PT006", "PT018"] #TODO: some of these should be fixed
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.7"
ignore-paths = ["src/formulate/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
    "design",
    "fixme",
    "line-too-long",
    "missing-module-docstring",
    "wrong-import-position",
]
